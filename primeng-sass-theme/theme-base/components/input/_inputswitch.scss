@use 'sass:math';

.p-inputswitch-slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
}

.p-inputswitch-slider:before {
    position: absolute;
    content: '';
    top: 50%;
}

//theme
.p-inputswitch {
    position: relative;
    display: inline-block;
    width: $inputSwitchWidth;
    height: $inputSwitchHeight;
    border-radius: $inputSwitchBorderRadius;

    .p-inputswitch-slider {
        background: $inputSwitchSliderOffBg;
        transition: $formElementTransition;
        border-radius: $inputSwitchBorderRadius;
        outline-color: transparent;

        &:before {
            background: $inputSwitchHandleOffBg;
            width: $inputSwitchHandleWidth;
            height: $inputSwitchHandleHeight;
            left: $inputSwitchSliderPadding;
            margin-top: math.div(-1 * $inputSwitchHandleHeight, 2);
            border-radius: $inputSwitchHandleBorderRadius;
            transition-duration: $transitionDuration;
        }
    }

    &.p-inputswitch-checked {
        .p-inputswitch-slider {
            background: $inputSwitchSliderOnBg;

            &:before {
                background: $inputSwitchHandleOnBg;
                transform: translateX($inputSwitchHandleWidth);
            }
        }
    }

    &:not(.p-disabled) {
        .p-inputswitch-slider:hover {
            background-color: $inputSwitchSliderOffHoverBg;
        }

        &.p-focus,
        &:focus-visible {
            @include focused();
        }
    }
}

p-inputswitch {
    &:not(.p-disabled) {
        &.p-element.ng-dirty.ng-invalid,
        &.p-element.ng-touched.ng-invalid {
            .p-inputswitch-slider {
                @include invalid-input();
            }
        }
    }
}
